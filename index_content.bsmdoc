= Why bsmdoc?
bsmdoc is a tool to generate technical html files.

There are many ways to generate html files. Typing the html tags directly may not be a good use of our time. Otherwise, you may end up spending a lot of time on finding a mismatched \tag{code|tag}. There are many tools that can help to generate html documents from various formats.
In this case, there may be no need to worry about the html tags anymore, as they are automatically generated and "guaranteed" to be correct. Most of them try to make a comprehensive and complicated tool, which may contain many features and meet most requirements; however, once you need some missing features, it is almost impossible to update it by yourself.

There should be a simple way to generate html files; bsmdoc is designed to be a light-weighted tool, which keeps the 'core' as small as possible. It only provides some very basic features, but allow you to extend the tool to solve your own problem in a straightforward way.

Furthermore, bsmdoc also gives you a chance to write the doc in a \tag{code|single} file. You can always type the text in your favourite editor, generate the images with Matlab, write your equation with $Latex$ and export the images files... But, with bsmdoc, you can finish all these steps in just a single file.

However, if you know nothing about python or some basic programming skill, bsmdoc may not be ideal for you, unless the very limited pre-defined features is what you want.

bsmdoc splits the whole doc into blocks (e.g., equation block, paragraph block, heading block, ...). In the following sections, we will show each block in detail, as well as the way to extend the existing blocks.

== Hello World
* Download [https://github.com/tianzhuqiao/bsmdoc|bsmdoc]
*- { to install the script, go the download bsmdoc folder
{!highlight|shell||{%
> pip install --editable .
%}!}
}
* {Create a file (e.g., \tag{strong|helloworld.bsmdoc}) with content
{!highlight|bsmdoc||{%
= hello world!
%}!}
}
* {Compile the file
{!highlight|bash||{%
> bsmdoc helloworld.bsmdoc
%}!}}
* {It will generate \tag{strong|helloworld.html} in the same folder, which may look like
{!exec||{%
def bsmdoc_helloworld(data, args, **kwargs):
    import os
    gen = True
    try:
        doc = os.path.getmtime('helloworld.bsmdoc')
        html = os.path.getmtime('helloworld.html')
        bsmdoc = os.path.getmtime(__file__)
        if doc < html and bsmdoc < html:
            gen = False
    except:
        gen = True
    if gen:
        os.system("bsmdoc helloworld.bsmdoc")
    with open('helloworld.html', 'r') as f:
        return ''.join(f.readlines())
    return data
%}!}
{!highlight|html||helloworld||
!}
}

= Heading \label{sec-heading}
\config{heading_in_contents|False}
\config{heading_numbering|False}
\tag{code|heading} block is defined by the line starting with "\tag{code|=}"
{!div|bs-example||
# stop numbering the headers, so that the following headers will not affect
# the structure of this doc
= level 1
== level 2
=== level 3
==== level 4
===== level 5
====== level 6
!}{!div|bs-example-src||highlight|bsmdoc||{%
= level 1
== level 2
=== level 3
==== level 4
===== level 5
====== level 6
%}!}

As you have seen, heading block must start at a new line. In other words, \tag{code|=} (e.g., in a paragraph) will be viewed as normal equal sign if it is not at the start of a line.
bsmdoc supports all 6 heading levels as shown above. However, we don't think anyone needs all these 6 levels (remember, [http://www.feynmanlectures.caltech.edu/|"The Feynman Lectures on Physics"] only uses 2 levels).

heading text can spread over multiple lines as long as they are enclosed by "\tag{code|\{\}}", as shown in the following example. Actually, "\tag{code|\{\}}" also define a basic block in bsmdoc. It is quite flexible to define the heading text; generally, you are allowed to put everything in it.
{!div|bs-example||
# stop numbering the headers, so that the following headers will not affect
# the structure of this doc
= {multiple\n
line\n
heading}
= {multiple
line
heading}
!}{!div|bs-example-src||highlight|bsmdoc||{%
= {multiple\n
line\n
heading}
= {multiple
line
heading}
%}!}

To add reference to the \tag{code|heading} block, first you need to add a label to it with command "\tag{code|{%\label%}}". Then, it can be referenced as a normal in-page [#sec-link|link].
{!div|bs-example||
= {section with label\label{sec-label}}
This [#sec-label|section] ...
!}{!div|bs-example-src||highlight|bsmdoc||{%
= {section with label\label{sec-label}}
This [#sec-label|section] ...
%}!}

By default, the heading block will not be automatically numbered. The following configuration is used to turn on the automatic numbering
{!highlight|bsmdoc||{%
\config{heading_numbering|True}
%}!}

bsmdoc will not start the automatic heading numbering until you set the above flag. Thus if you want bsmdoc to add numbering to the whole doc, simply put the above configuration line at the beginning of the doc. You also can set the start heading level for automatic numbering. For example, the following line will tell bsmdoc to start heading numbering from level 2 (i.e., \tag{code|H2})
{!highlight|bsmdoc||{%
\config{heading_numbering_start|2}
%}!}

When referencing to a \tag{code|heading} block with automatic heading numbering on, the link text will be automatically filled with its index if it is empty,
{!div|bs-example||
Sec. [#sec-heading] ...
!}{!div|bs-example-src||highlight|bsmdoc||{%
Sec. [#sec-heading] ...
%}!}
It can also be achieved by \tag{code|{%\ref%}} command
{!div|bs-example||
Sec. \ref{sec-heading}...
!}{!div|bs-example-src||highlight|bsmdoc||{%
Sec. \ref{sec-heading}...
%}!}
\config{heading_in_contents|True}
\config{heading_numbering|True}
= List
bsmdoc defines two kinds of list blocks: \tag{code|unordered list} and \tag{code|ordered list}.
A line leading with "\tag{code|-}" will be rendered as unordered list. In other words, "\tag{code|-}" will be ignored if it is not at the start of a line. Such rule holds for all \tag{code|heading}, \tag{code|unordered list}, and \tag{code|ordered list} blocks.

{!div|bs-example||
- start each line
- with an hyphen -.
-- more asterisks gives deeper
--- and deeper levels.
- line breaks\n don't break levels.
--- but jumping levels creates empty space.
any other start ends the list.
!}{!div|bs-example-src||highlight|bsmdoc||{%
- start each line
- with a hyphen -.
-- more asterisks gives deeper
--- and deeper levels.
- line breaks\n don't break levels.
--- but jumping levels creates empty space.
any other start ends the list.
%}!}

Ordered list starts with "\tag{code|*}"

{!div|bs-example||
* start each line
* with a star '*'
 ** more asterisks gives deeper
 *** and deeper levels.
* line breaks\n don't break levels.
*** but jumping levels creates empty space.
any other start ends the list.
!}{!div|bs-example-src||highlight|bsmdoc||{%
* start each line
* with a start '*'
** more asterisks gives deeper
*** and deeper levels.
* line breaks\n don't break levels.
*** but jumping levels creates empty space.
any other start ends the list.
%}!}

Unordered and ordered lists can also be arbitrarily combined

{!div|bs-example||
- unordered level 1
-* ordered item 1
-* ordered item 2
-- unordered item 3
-- unordered item 4
!}{!div|bs-example-src||highlight|bsmdoc||{%
- unordered level 1
-* ordered item 1
-* ordered item 2
-- unordered item 3
-- unordered item 4
%}!}

Each item of a list can spread over multiple lines as long as they are enclosed by "\tag{code|\{\}}":

{!div|bs-example||
- {unordered level 1\n
 more text here
[bsmdoc.feiyilin.com | bsmdoc]
}
-* ordered item2
!}{!div|bs-example-src||highlight|bsmdoc||{%
- {unordered level 1\n
 more text here
[bsmdoc.feiyilin.com | bsmdoc]
}
-* ordered item2
%}!}

= Link \label{sec-link}
Text between \tag{code|\[} and \tag{code|\]} will be rendered as link block

{!div|bs-example||
[http://bsmedit.feiyilin.com]
!}{!div|bs-example-src||highlight|bsmdoc||{%
[http://bsmedit.feiyilin.com]
%}!}

Link text can be customized with "\tag{code|\|}"

{!div|bs-example||
[http://bsmedit.feiyilin.com | bsmedit]
!}{!div|bs-example-src||highlight|bsmdoc||{%
[http://bsmedit.feiyilin.com | bsmedit]
%}!}

Or email

{!div|bs-example||
[mailto:tianzhu.qiao@feiyilin.com |Email]
!}{!div|bs-example-src||highlight|bsmdoc||{%
[mailto:tianzhu.qiao@feiyilin.com | Email]
%}!}

You can also easily define in-page links with \tag{code|{%\anchor%}} command
{!div|bs-example||
In page link \anchor{myanchor}
!}{!div|bs-example-src||highlight|bsmdoc||{%
In page link \anchor{myanchor}
%}!}

Then, you can link to the in-page link by
{!div|bs-example||
My in-page [#myanchor|link]
!}{!div|bs-example-src||highlight|bsmdoc||{%
My in-page [#myanchor|link]
%}!}

\tag{b|Footnote.}
One special in-page link is \tag{code|footnote}\anchor{footnote}. It will automatic add the link to the position it gets defined, and add the footnote content at the end of the page. bsmdoc also adds a shortcut at the end of the footnote content, so you can return to the footnote definition position easily.
{!div|bs-example||
footnote example\footnote{This is a footnote}.
!}
{!div|bs-example-src||highlight|bsmdoc||{%
footnote example\footnote{This is a footnote}.
%}!}

bsmdoc will automatically add indexing to each footnote. When you move the cursor to the footnote link, the footnote content will show in a popup window. So you may not need to go to the end of the page to see the footnote content. The [#sec-image|image], [#sec-equation|equation] and [#sec-table|table] blocks support similar feature.

==Reference and citation
In technical writing, reference is very common. bsmdoc has an easy way to add references and citations. For example, the following command will add a book reference
\reference{Simon|Simon Haykin, "Adaptive Filter Theory," Prentice Hall, 4th edition, Sep. 2001}
{!highlight|bsmdoc||{%
\reference{Simon|Simon Haykin, "Adaptive Filter Theory," Prentice Hall, 4th edition, Sep. 2001}
%}!}
\tag{strong|Simon} before \tag{code|\|} is the alias, which can be used to cite it, e.g.,
{!div|bs-example||
The LMS algorithm in \cite{Simon}...
!}
{!div|bs-example-src||highlight|bsmdoc||{%
The LMS algorithm in \cite{Simon}...
%}!}
And the reference is not required to be defined before citation. If bsmdoc can not find the reference when it sees \tag{code|\\cite}, it will trigger the second scan, in case the reference is defined after the citation. If the reference is still missing at the second scan, bsmdoc will show a warning.

All cited references will be appended to the end of the document in the citation order. If you want to add the reference without citation, you can use the \tag{code|hide} argument of the \tag{code|cite} command
{!highlight|bsmdoc||{%
\cite{hide|Simon}...
%}!}
In this case, it will not generate the link to the reference, but the reference will still be added to the reference list even if there is no explicit citation in the document.

= Image \label{sec-image}
{!exec|firstRunOnly||{%
import os.path
if not os.path.isfile("image/scatter.svg"):
    import matplotlib.pyplot as plt
    import numpy as np

    plt.clf()
    plt.figure(figsize=(4,4))
    N = 50
    x = np.random.rand(N)
    y = np.random.rand(N)
    colors = np.random.rand(N)
    area = np.pi * (15 * np.random.rand(N))**2  # 0 to 15 point radii

    plt.scatter(x, y, s=area, c=colors, alpha=0.5)
    plt.savefig("image/scatter.svg")
%}!}

The syntax of the \tag{code|image} block is

{!highlight|bsmdoc||{%
{!image||
image_file_path
!}
%}!}

So, include an image is as easy as
{!div|bs-example|| image||
./image/scatter.svg
!}{!div|bs-example-src||highlight|bsmdoc||{%
{!image||
./image/scatter.svg
!}
%}!}

You can add optional caption to an image block
{!div|bs-example||image||
\caption{Example scatter image}
./image/scatter.svg
!}{!div|bs-example-src||highlight|bsmdoc||{%
{!image||
\caption{Example scatter image}
./image/scatter.svg
!}
%}!}

To add reference to an image, you need to
* { add a label to an image block with \tag{code|\\label} command
{!div|bs-example||image||
\label{img-scatter}
\caption{Example scatter image}
./image/scatter.svg
!}{!div|bs-example-src||highlight|bsmdoc||{%
{!image||
\label{img-scatter}
\caption{Example scatter image}
./image/scatter.svg
!}
%}!}
}
* { add reference to the image with \tag{code|\\ref} command
{!div|bs-example||
Fig. \ref{img-scatter} shows a scatter diagram
!}{!div|bs-example-src||highlight|bsmdoc||{%
Fig. \ref{img-scatter} shows a scatter diagram
%}!}
}

Here the reference link \tag{code|{%\ref{img-scatter}%}}) is defined after the definition of the image block. The reference link text is automatically replaced with the image index. In some case, if the reference link is created before the image block is defined, bsmdoc will not know the destination, when it sees the reference link. In this case, the second scan will automatically be triggered to solve the reference link.

When the cursor is moved to the reference link, the referenced image will be highlighted if it is visible; otherwise, the image will be shown in a popup window. Such feature is inspired by [http://www.feynmanlectures.caltech.edu/|"The Feynman Lectures on Physics"] website. It allows you to view the images at the current reference position. Otherwise, you would have to follow the link to the original place where the image is first included. To use such feature, the image label should start with "\tag{code|img-}", which is hard-coded in the Javascript. The references to [#sec-equation|equation], [#sec-table|table], and [#footnote|footnote] behave similarly.

As you have seen, the image block can automatically add the numbering to the image with label. The default automatic indexing format is: "\tag{code|Fig. I.}", where "\tag{code|I}" is the current index. You can configure the automatic prefix text. For example, to change it to "\tag{code|Image }", the following line can be inserted before a image block definition (usually at the beginning of the doc, so that it affects all the image blocks)

{!highlight|bsmdoc||{%
\config{image_numbering_prefix|Image }
%}!}
For example
{!div|bs-example||image||
\config{image_numbering_prefix|Image }
\label{img-scatter2}
\caption{Example scatter image}
./image/scatter.svg
!}{!div|bs-example-src||highlight|bsmdoc||{%
{!image||
\config{image_numbering_prefix|Image }
\label{img-scatter2}
\caption{Example scatter image}
./image/scatter.svg
!}
%}!}

= Equation \label{sec-equation}
bsmdoc relies on [http://www.mathjax.org|mathjax] to render the equations: both inline and normal equation blocks. The [http://docs.mathjax.org/en/latest/start.html|configuration] may look like:
{!highlight|html||{%
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        tex2jax: {inlineMath: [['$','$']]},
        processClass: "mathjax",
        ignoreClass: "tex2jax_ignore|nomathjax"
    });
    MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "all"} } });
</script>
<script type="text/javascript" async
  src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML">
</script>
%}!}

Such configuration can be included in a configuration file, which will be shown in detail in Sec. [#sec-template].

bmdoc looks for "\tag{code|$...$}" as delimiters for inline equation block

{!div|bs-example||
Newton's second law is often stated as $F=ma$, which means the force ($F$) acting on an object is equal to the mass ($m$) of an object times its acceleration ($a$).
!} {!div|bs-example-src||highlight|bsmdoc||{%
Newton's second law is often stated as $F=ma$, which means the force ($F$) acting on an object is equal to the mass ($m$) of an object times its acceleration ($a$).
%}!}

The normal equation block looks like
{!highlight|bsmdoc||{%
{!math||{%
Latex Equation
%}!}
%}!}
or
{!highlight|bsmdoc||{%
$$
Latex Equation
$$
%}!}
For example

{!div|bs-example|| math||{%
\begin{align}
\begin{bmatrix}
0      & \cdots & 0      \\
\vdots & \ddots & \vdots \\
0      & \cdots & 0
\label{eqn:matrix}
\end{bmatrix}
\end{align}
%}!}
{!div|bs-example-src||highlight|bsmdoc||{%
{!math||{%
\begin{align}
\begin{bmatrix}
0      & \cdots & 0      \\
\vdots & \ddots & \vdots \\
0      & \cdots & 0
\label{eqn:matrix}
\end{bmatrix}
\end{align}
%}!}%}!}

bsmdoc generally keeps the equation content (i.e., the content between \tag{code|\{\%...\%\}}) untouched, except \tag{code|<} and \tag{code|>}, which will be replaced with \tag{code|&amp;lt;} and \tag{code|&amp;gt;}, respectively, to avoid the conflict with html tags. For example,
{!div|bs-example||pre||{%
$a &amp;gt; 5$
%}!}{!div|bs-example-src||highlight|bsmdoc||{%
$a>5$
%}!}

Unlike the [#sec-image|image] block mentioned above, the reference to equation is also handled by [http://www.mathjax.org|mathjax]. The syntax is same as $Latex$

{!div|bs-example||
Eq. (\ref{eqn:matrix}) or
Eq. (\eqref{eqn:matrix})
!}{!div|bs-example-src||highlight|bsmdoc||{%
Eq. (\ref{eqn:matrix}) or
Eq. (\eqref{eqn:matrix})
%}!}

As mentioned above, same as the [#sec-image|image] block, when you move the cursor to the equation reference link, bsmdoc will highlight the referenced equation if it is visible. Otherwise, a popup window will be displayed to show the equation.

= Table \label{sec-table}
The table block is defined with \tag{code|\{\{...\}\}}, where
- each row is ended by "\tag{code|\|-}";
- each column in a row is terminated by "\tag{code|\|}".

The content in each column of each row can be anything defined above, for example, [#sec-link|Link], [#sec-image|Image], [#sec-equation|Equation],...
{!div|bs-example||
{{
item1 | $E=MC^2$ ||-
[http://bsmdoc.feiyilin.com|bsmdoc] | {!div|figure|image-left|image-thumbnail||\image{image/scatter.svg}!} ||-
}}
!}{!div|bs-example-src ||highlight|bsmdoc||{%
{{
item1 | $E=MC^2$ ||-
[http://bsmdoc.feiyilin.com|bsmdoc] | {!div|figure|image-left|image-thumbnail||\image{image/scatter.svg}!} ||-
}}
%}!}

Optionally, a heading line can be added in the front of the table block
- the heading line is delimited by "\tag{code|\|\+}".

{!div|bs-example||
{{
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
!}{!div|bs-example-src ||highlight|bsmdoc||{%
{{
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
%}!}

Furthermore, a caption can be added to the table block too
\config{table_numbering|False}
{!div|bs-example||
{{
\caption{Example table title}
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
!}{!div|bs-example-src ||highlight|bsmdoc||{%
{{
\caption{Example table title}
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
%}!}

bsmdoc can also add the automatic indexing to the table caption. To do that, you need to
- {turn on the option
{!highlight|bsmdoc||{%
\config{table_numbering|True}
%}!}
bsmdoc will add the automatic indexing to all the tables defined after the above line, until you explicitly turn off the configuration.
}
- {add the label to each table you want to add the automatic indexing
{!highlight|bsmdoc||{%
\label{table_label}
%}!}}

\config{table_numbering_prefix|Table.}
{!div|bs-example||
{{
\config{table_numbering|True}
\label{tbl-example}
\caption{Example table title}
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
!}{!div|bs-example-src ||highlight|bsmdoc||{%
{{
\config{table_numbering|True}
\label{tbl-example}
\caption{Example table title}
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
%}!}

The default automatic indexing format is: "\tag{code|Table. I.}", where "\tag{code|I}" is the current index. You can configure the automatic prefix text. For example, to change it to "\tag{code|TABLE }", the following line can be inserted before the table block definition
{!highlight|bsmdoc||{%
\config{table_numbering_prefix|TABLE }
%}!}

{!div|bs-example||
{{
\config{table_numbering_prefix|TABLE }
\label{tbl-example2}
\caption{Example table title}
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
!}{!div|bs-example-src ||highlight|bsmdoc||{%
{{
\config{table_numbering_prefix|TABLE}
\label{tbl-example2}
\caption{Example table title}
Heading1 | Heading2||+
item1 | item2 ||-
item3 | item4 ||-
}}
%}!}

#You can also add the prefix indexing to the automatic indexing
#{!highlight|bsmdoc||{%
#\config{table_numbering_num_prefix|7.}
#%}!}
#{!div|bs-example||
#{{
#\config{table_numbering_num_prefix|7.}
#\config{label|tbl-example3}
#\config{caption|Example table title}
#Heading1 | Heading2||+
#item1 | item2 ||-
#item3 | item4 ||-
#}}
#!}{!div|bs-example-src ||highlight|bsmdoc||{%
#{{
#\config{image_numbering_num_prefix|7.}
#\config{label|tbl-example3}
#\config{caption|Example table title}
#Heading1 | Heading2||+
#item1 | item2 ||-
#item3 | item4 ||-
#}}
#%}!}

The label enables not only the automatic indexing, but also the cross-reference. Reference to a table is as easy as [#sec-image|image] and [#sec-equation|equation] blocks

{!div|bs-example||
Table \ref{tbl-example} shows how to make a table in bsmdoc.
!}{!div|bs-example-src||highlight|bsmdoc||{%
Table \ref{tbl-example} shows how to make a table in bsmdoc.
%}!}

If the table label text starts with "\tag{code|tbl-}", when the cursor is moved to the reference index, the table will be highlighted if it is visible; otherwise, a popup window will be displayed to show the table content.

= Syntax highlighting \label{sec-highlight}
bsmdoc uses [http://pygments.org/docs/quickstart/ | Pygments] for syntax highlighting. The syntax is
{!highlight|bsmdoc||{%
{!highlight|language||{%
code
%}!}
%}!}
where \tag{code|language} can be any language supported by [http://pygments.org/languages/|Pygments]. For example,
- {python
{!div|bs-example||highlight|python||{%
print "Hello World"
%}!}{!div|bs-example-src||highlight|bsmdoc||{%
{!highlight|python||{%
print "Hello World"
%}!}
%}!}
}
- {matlab
{!div|bs-example||highlight|matlab||{%
fprintf(1, 'Hello, world!\n');
%}!}{!div|bs-example-src||highlight|bsmdoc||{%
{!highlight|matlab|{%
fprintf(1, 'Hello, world!\n');
%}!}
%}!}
}
-{C++
{!div|bs-example|| highlight|C++||{%
#include <iostream>
using namespace std;

int main ()
{
    cout << "Hello World!";
    return 0;
}
%}!}{!div|bs-example-src||highlight|bsmdoc||{%
{!highlight|C++||{%
#include <iostream>
using namespace std;

int main ()
{
    cout << "Hello World!";
    return 0;
}
%}!}
%}!}
}

It is possible to use other way or package for syntax highlighting, which will be discussed in detail in Sec. [#sec-funblock].

= Raw text block #(\tag{code|\{\% \%\}})
Sometimes you may want to skip the parsing from bsmdoc. For example, to highlight the code, it is basically not a good idea to let bsmdoc parse the code. Instead, the raw data should be sent to the code highlighting block. In another example, you may have seen similar syntax between the latex macro and the bsmdoc commands (e.g., both are preceded by "\tag{code|\\}"). If bsmdoc tries to parse these latex macros, the result is obviously not what you want. Thus, bsmdoc defines the raw text block. It basically tells bsmdoc to ignore all the rules on its content.
The syntax of the raw text block is

{!highlight|bsmdoc||{%
{%
Content
%}
%}!}

In this case, bsmdoc will stop parsing the \tag{code|Content} between \tag{code|\{\%...\%\}}, and the raw text will be either sent to the final html file or send to the other function blocks to process.

However, sometimes you may still want to slightly process the \tag{code|Content} before sending to the html file. For example, the \tag{code|Content} may contain symbols (e.g., \tag{code|< >}), which may cause conflict to the html tags. You can use the \tag{code|escape} function block to process the data
{!highlight|bsmdoc||{%
{!escape||{%
Content
%}!}
%}!}

In this case, \tag{code|<} and \tag{code|>} will be replaced with \tag{code|&amp;lt;} and \tag{code|&amp;gt;}, respectively.
{!div|info||
The [#sec-equation|equation] block will automatically replace \tag{code|<} (\tag{code|>}) with \tag{code|&amp;lt;} (\tag{code|&amp;gt;}). Thus, there is no need to explicitly call the \tag{code|escape} function block.
!}
By symmetry, bsmdoc also defines the \tag{code|unescape} function block, which will replace \tag{code|&amp;lt;} (\tag{code|&amp;gt;}) with \tag{code|<} (\tag{code|>}).

= Function block \label{sec-funblock}
Function block makes things really interesting. Without function block, bsmdoc is almost useless. Function block provides a easy way to allow the content to be processed before sent to the final html file.
As you have seen above, the syntax of a function block looks like

{!highlight|bsmdoc||{%
{!command
content
!}
%}!}
where \tag{code|command} is optional and may contain the name and arguments of the corresponding function block.

As described above, many features mentioned above are implemented with function blocks.
For example,
- {[#sec-image|image] block:

{!highlight|bsmdoc||{%
{!image||
image-path
!}
%}!}
}
- {[#sec-equation|equation] block:

{!highlight|bsmdoc||{%
{!math||{%
latex-equation
%}!}
%}!}
}
- {[#sec-highlight|syntax highlight] block:
{!highlight|bsmdoc||{%
{!highlight|language||{%
code
%}!}
%}!}
}
- {div tag
{!div|bs-example||highlight|html||{%
<div class="div-class">
content
</div>
%}!}
{!div|bs-example-src||highlight|bsmdoc||{%
{!div|div-class||
content
!}
%}!}
}
- {pre tag
{!div|bs-example||highlight|html||{%
<pre>
content
</pre>
%}!}
{!div|bs-example-src||highlight|bsmdoc||{%
{!pre||{%
content
%}!}
%}!}
}
- {general tag
{!div|bs-example||highlight|html||{%
<key class="tag-class">
content
</key>
%}!}
{!div|bs-example-src||highlight|bsmdoc||{%
{!tag|key|tag-class||
content
!}
%}!}
}

The \tag{code|command} section is optional. When the \tag{code|command} section is not defined, the function block behaves exactly same as the simple block (\tag{code|\{\}}). Otherwise, the corresponding function will be called to process the content.
As you may have already figured out, the \tag{code|command} section is defined as

{!highlight|bsmdoc||{%
command|arg0|arg1|arg2|...|argN||
%}!}

The command can have arbitrary number of arguments, which are separated by "\tag{code|\|}". And the command is always terminated by "\tag{code|\|\|}". It is also possible to combine multiple commands

{!highlight|bsmdoc||{%
command0|arg0|arg1|arg2||command1|arg0|arg1|arg2||
%}!}

In this case, the commands are called from right to left. Thus in the above example, \tag{code|command1} will be called first, and its result will be sent to \tag{code|command0}. The result from \tag{code|command0} will be sent to the html file. It is equivalently to the following nested blocks
{!highlight|bsmdoc||{%
{!command0|arg0|arg1|arg2||
{!command1|arg0|arg1|arg2||
    content
!}!}
%}!}

The function block makes it easy to extend bsmdoc. We could have defined all kinds of function blocks to generate all html tags, and write a comprehensive doc so we can look up later. We don't. Otherwise, that will not be significantly different from remembering all html syntax. Instead, we make it easy to add new functions.

When bsmdoc sees the following function block
{!highlight|bsmdoc||{%
{!command|arg0|arg1||
    content
!}
%}!}

it will search for the function with name "\tag{code|bsmdoc_command}". If found, it will execute the command with list "\tag{code|\[arg0, arg1\]}" as argument. For example, if you want to define a function block to achieve the "\tag{del|delete}" effect,
- {first you need to define the function (e.g., "\tag{code|bsmdoc_del}"),
{!highlight|python||{%
def bsmdoc_del(data, args, **kwargs):
    return "<del>%s</del>"%data
%}!}{!exec||{%
def bsmdoc_del(data, args, **kwargs):
    return "<del>%s</del>"%data
%}!}
Here \tag{code|**kwargs} are additional arguments from bsmdoc, for example
{{
    argument|description||+
    inline| \tag{code|True} if it is a inline block (we will discuss the inline block shortly).||-
    filename| the current filename||-
    lineno| the line number of the start of the function block||-
}}
Such info may be helpful to show debugging tips once some error happens.
}
- {Now the \tag{code|del} can be used as all the other blocks,

{!div|bs-example||highlight|html||del||
delete
!}{!div|bs-example-src||highlight|bsmdoc||{%
{!del||
delete
!}
%}!}
}

All \tag{code|bsmdoc_command} function should return a \tag{strong|string}, which will be sent to the next block or the html file. If the function does not need to change the html file, it should return the empty string.

The next question is where to put the function definition? One straightforward solution is to define the above \tag{code|bsmdoc_del} function in \tag{code|bsmdoc.py} and then all the documents can use the \tag{code|del} function block. However, that also means once you need some missing features, you need to go back to the \tag{code|bsmdoc.py} and define the functions there. It may cause two potential issues:
- {It needs to edit additional file \tag{code|bsmdoc.py} besides the docs you are working on. Thus the change is not local to the doc itself. If there is some mistake in the code, suddenly no doc can be compiled;}
- How about two docs need slightly different implementation of some function? You may end up either using some slightly different (but not straightforward) function names, or adding additional arguments to the function blocks.
Neither way is scalable. bsmdoc provides the third choice: the function block can be defined in the same doc where it is called. To achieve that, bsmdoc define a special \tag{code|exec} block
{!highlight|bsmdoc||{%
{!exec||{%
code
%}!}
%}!}
which will execute the \tag{code|code} automatically.
Thus, including the following code in your doc will automatically add the \tag{code|bsmdoc_del} function just as it is defined in \tag{code|bsmdoc.py} (but be careful, since bsmdoc will call python function "\tag{code|exec()}" for this feature, it may cause some security concerns).
{!highlight|bsmdoc||{%
{!exec||{%
def bsmdoc_del(data, args, **kwargs):
    return "<del>%s</del>"%content
%}!}
%}!}

With the \tag{code|exec} block, you can replace all the predefined blocks with this method. For example, you can define your code highlight function block so that you can highlight your own language or with other library
{!highlight|bsmdoc||{%
{!exec||{%
def bsmdoc_highlight(data, args, **kwargs):
    ...
%}!}
%}!}

Or in some case, you just want to use your own function for some arguments. For example, you want to call your own function to highlight the code for a specific language, and use the default function for all the others. In this case, you may try
{!highlight|bsmdoc||{%
{!exec||{%
bsmdoc_highlight_raw = bsmdoc_highlight
def bsmdoc_highlight(data, args, **kwargs):
    if args[0] != 'mylang':
        return bsmdoc_highlight_raw(data, args, **kwargs)
    # highlight 'mylang'
    ...
%}!}
%}!}

It may work fine to compile most of your docs, until one day it fails and python complains indefinite loop. The problem here is that the above definition assumes such code will only be called once. But it is not always true for bsmdoc. As mentioned before, bsmdoc may scan the doc multiple times to solve the late-defined references. Thus, when bsmdoc executes the above code second time, \tag{code|bsmdoc_highlight_raw} will not refer to the original \tag{code|bsmdoc_highlight}, instead, it will also point to the local defined copy. The definition will be equivalent to
{!highlight|bsmdoc||{%
{!exec||{%
bsmdoc_highlight_raw = bsmdoc_highlight
def bsmdoc_highlight(data, args, **kwargs):
    if args[0] != 'mylang':
        return bsmdoc_highlight(data, args, **kwargs)
    # highlight 'mylang'
    ...
%}!}
%}!}

It is apparently an indefinite loop.

Several techniques can be used to solve this problem. For example, you can always define the whole function by yourself, instead of calling the default function in some branches. Or you may check whether the local function has been defined or not
{!highlight|bsmdoc||{%
{!exec||{%
try:
    bsmdoc_highlight_raw
except NameError:
    bsmdoc_highlight_raw = bsmdoc_highlight
    def bsmdoc_highlight(data, args, **kwargs):
        if args[0] != 'mylang':
            return bsmdoc_highlight(data, args, **kwargs)
        # highlight 'mylang'
        ...
%}!}
%}!}

Or you can tell bsmdoc to execute the code for the first scan only
{!highlight|bsmdoc||{%
{!exec|firstRunOnly||{%
bsmdoc_highlight_raw = bsmdoc_highlight
def bsmdoc_highlight(data, args, **kwargs):
    if lang != 'mylang':
        return bsmdoc_highlight(data, args, **kwargs)
    # highlight 'mylang'
    ...
%}!}
%}!}

== Generate images
Besides defining the function block, the \tag{code|exec} block can also be used to execute arbitrary python code (\tag{b|be careful\!}). One application is to embed the python code to generate the figure with [http://matplotlib.org/|matplotlib] package,

{!exec|firstRunOnly||{%
import os.path
if not os.path.isfile("image/pie.svg"):
    import matplotlib.pyplot as plt
    import numpy as np

    plt.clf()
    plt.figure(figsize=(4,4))
    # Compute pie slices
    N = 20
    theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)
    radii = 10 * np.random.rand(N)
    width = np.pi / 4 * np.random.rand(N)

    ax = plt.subplot(111, projection='polar')
    bars = ax.bar(theta, radii, width=width, bottom=0.0)

    # Use custom colors and opacity
    for r, bar in zip(radii, bars):
        bar.set_facecolor(plt.cm.viridis(r / 10.))
        bar.set_alpha(0.5)
    plt.savefig("image/pie.svg")
%}!}
{!highlight|bsmdoc||{%
{!exec||{%
import os.path
if not os.path.isfile("pie.svg"):
    import matplotlib.pyplot as plt
    import numpy as np

    plt.clf()
    plt.figure(figsize=(4,4))
    # Compute pie slices
    N = 20
    theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False)
    radii = 10 * np.random.rand(N)
    width = np.pi / 4 * np.random.rand(N)

    ax = plt.subplot(111, projection='polar')
    bars = ax.bar(theta, radii, width=width, bottom=0.0)

    # Use custom colors and opacity
    for r, bar in zip(radii, bars):
        bar.set_facecolor(plt.cm.viridis(r / 10.))
        bar.set_alpha(0.5)
    plt.savefig("image/pie.svg")
%}!}
%}!}

Then you can include the \tag{code|pie.svg} in your html file
{!div|bs-example|| image||
./image/pie.svg
!}{!div|bs-example-src||highlight|bsmdoc||{%
{!image||
./image/pie.svg
!}
%}!}

Thus, there may be no need to use other software to generate figures.

== Include source code
With function block, you can also easily include source code in your html doc. For example, to import the python source code in your doc, you can define the following function block
{!highlight|bsmdoc||{%
{!exec|firstRunOnly||{%
import inspect
def bsmdoc_codesnippet(data, args, **kwargs):
    d = eval(data)
    if isinstance(d, str):
        return d
    else:
        return inspect.getsource(d)
%}!}
%}!}
{!exec|firstRunOnly||{%
import inspect
def bsmdoc_codesnippet(data, args, **kwargs):
    d = eval(data)
    if isinstance(d, basestring):
        return d
    else:
        return inspect.getsource(d)
%}!}
Then you can include the source code (e.g., matplotlib.pyplot.plot) by
{!div|bs-example||
{!exec|firstRunOnly||{%
import matplotlib.pyplot as plt
%}!}
{!highlight|python||codesnippet||
plt.plot
!}
!}
{!div|bs-example-src||highlight|bsmdoc||{%
{!exec|firstRunOnly||{%
import matplotlib.pyplot as plt
%}!}
{!highlight|python||codesnippet||
plt.plot
!}
%}!}

It can be easily extended to include arbitrary code. For example, the following block returns the content of a source file. Of course, you can write a function block to just return certain sections (e.g., a function), instead of the whole file.
{!highlight|bsmdoc||{%
{!exec|firstRunOnly||{%
def bsmdoc_ccodesnippet(data, args, **kwargs):
    with open(data, 'r') as f:
        return ''.join(f.readlines())
    return data
%}!}
%}!}
{!exec|firstRunOnly||{%
def bsmdoc_ccodesnippet(data, args, **kwargs):
    with open(data, 'r') as f:
        return ''.join(f.readlines())
    return data
%}!}
Then you can include the source code by
{!div|bs-example||
{!highlight|javascript||ccodesnippet||
js/menu.js
!}
!}
{!div|bs-example-src||highlight|bsmdoc||{%
{!highlight|javascript||ccodesnippet||
js/menu.js
!}
%}!}

== Inline function block
The difference between \tag{code|function block} and \tag{code|inline function block} is similar to the \tag{code|equation block} and \tag{code|inline equation block}. In other words, the output of the inline block can be embedded in the paragraph. The syntax is similar to the $\LaTeX$ macro:
{!highlight|bsmdoc||{%
\command{arg0|arg1|...|argN|content}
%}!}

In general, the blocks defined in the above section can also be used as inline block. For example

{!div|bs-example||highlight|html||
\tag{code|content}
\pre{content}
!}{!div|bs-example-src||highlight|bsmdoc||
{%
\tag{code|content}
\pre{content}
%}
!}

bsmdoc defines a special inline function block for configuration (\tag{code|{%\config{}%}}). It adds a configuration item to bsmdoc's global configuration table, and output empty string to the html file. Thus, it will not directly update the html docs, although the other blocks may rely on such configurations to control their behaviors. The syntax is

{!highlight|bsmdoc||{%
\config{option|value}}
%}!}

We have seen [#sec-heading|heading], [#sec-image|image], and [#sec-table|table] blocks use such feature to set the label and/or caption. We will see more configurations in Sec. [#sec-template].

#The options used by the default block function implementation
#{{
#option | description | default | |+
#title | the title of the file | filename ||-
#doctitle | the title of the doc | ''  ||-
#subtitle | the subtitle of the doc| '' ||-
#heading_numbering| order the headings| False ||-
#heading_numbering_start | the start level for ordered heading| 1 ||-
#image_numbering | show the number of images| 0 ||-
#table_numbering | show the number of tables| 0 ||-
#bsmdoc_conf | the configure file name | '' ||-
#source | show the link to bsmdoc source | 0 ||-
#addcss | add more css file links | '' ||-
#addjs  | add more javascript file links | '' ||-
#}}

= Input redirection
bsmdoc can automatically generate the table of content with

{!highlight|bsmdoc||{%
#makecontent
%}!}

Only the headings with automatic numbering will be included in the content list. \tag{code|makecontent} will also trigger bsmdoc to scan the doc twice.

\tag{code|makecontent} is implemented by a function \tag{code|bsmdoc_makecontent}.
 Its input is a list that contains all the headings. The default implementation generates an un-ordered list
{!highlight|python||codesnippet||
bsmdoc_makecontent
!}

When the doc becomes large, you can split your doc into several docs and includes them in the top doc with the "\tag{code|\#include}" directive. For example, suppose you are writing a book, and have created \tag{code|chappter1.bsmdoc}, \tag{code|chapter2.bsmdoc}, .... Then, you can include all the chapters in your \tag{code|book.bsmdoc}

{!highlight|bsmdoc||{%
#include chapter1.bsmdoc
#include chapter2.bsmdoc
%}!}

bsmdoc will replace the line \tag{code|\#include chapter1.bsmdoc} with the content of the file \tag{code|chappter1.bsmdoc}.

The \tag{code|\#include} is implemented with function \tag{code|bsmdoc_include}
{!highlight|python||codesnippet||
bsmdoc_include
!}
Here \tag{code|data} will be anything following \tag{code|\#include}. In the previous example, it will be "\tag{code|chapter1.bsmdoc}" or "\tag{code|chapter2.bsmdoc}". If the file is opened successfully, by default \tag{code|bsmdoc_include} will return the filename and its content.

It is easy to extend the \tag{code|bsmdoc_include} function for more advanced applications, for example
{!highlight|bsmdoc||{%
{!exec|firstRunOnly||{%
bsmdoc_include_raw = bsmdoc_include
def bsmdoc_include(data):
    # assume 'data' has multiple sections separated by '|', in the format of
    # PATTERN | MAX LINE | FILENAME
    d = data.strip().split('|')
    if len(d) == 1:
        # one section, return the default
        return bsmdoc_include_raw(data)
    elif len(d) == 3:
        import re
        # assume the last parameter is the filename
        c = bsmdoc_include_raw(d[-1])
        if not c:
            # invalid filename
            return c
        lines = c[1].split('\n')
        pattern = []
        for i, l in enumerate(lines):
            # search the PATTERN
            if re.match(d[0], l):
               pattern.append(i)
            if len(pattern) == 2:
                # return the content between the first and second instances of PATTERN
                if pattern[1] - pattern[0] > int(d[1]):
                    # too many lines, cut it
                    pattern[1] = pattern[0] + int(d[1])
                return (c[0], '\n'.join(lines[pattern[0]+1:pattern[1]]))
        return c
    return None
%}!}
%}!}

The the following code will include the content between the first two headings from file \tag{code|myfile.bsmdoc}. And the maximum number of lines is limited to 16.
{!highlight|bsmdoc||{%
#include ^(\\s)*=+|16|./myfile.bsmdoc
%}!}

= HTML template \label{sec-template}
By default, bsmdoc uses the following template to generate the html file, which defines 4 sections (i.e., \tag{code|html}, \tag{code|header}, \tag{code|body} and \tag{code|footer})

{!highlight|ini||codesnippet||
bsmdoc_conf
!}

Using a separate configuration file seems not to be compatible with our goal to include everything in a single file, although sometimes it may be convenient (for example, to use the same configuration file for multiple docs). bsmdoc also provides a way to include the customized template in your doc, for example
{!highlight|ini||{%
{!config||{%
[html]
begin = <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
end= </html>
...
%}!}
%}!}

In this case, "\tag{code|config}" function block is called without any argument. And its content should have a INI file structure.

bsmdoc uses [https://docs.python.org/2/library/configparser.html|ConfigParser] to parse the configurations. Thus, \tag{code|\%()s} will be resolved to the corresponding configuration values. The configuration name is case insensitive. For example,

- {\tag{code|\%(TITLE)s} will be replaced with "\tag{code|my html title}", if you config the title with
{!highlight|bsmdoc||{%
\config{title|my html title}
%}!}}
- \tag{code|\%(UPDATED)s} will be replaced with the time when the html file is generated.
- \tag{code|\%(SOURCE)s} will be replaced with the bsmdoc filename.

It is easy to create a configuration by
- {define the macro content, e.g.,
{!highlight|bsmdoc||{%
\config{MYMACRO|...}
%}!}}
- {use the configuration in the template
{!highlight|bsmdoc||{%
...%(MYMACRO}s...
%}!}}


bsmdoc defines "\tag{code|css}" configuration to insert additional \tag{code|css} in the html file without change the html template

{!highlight|bsmdoc||{%
\config{css|my.css}
%}!}

To insert multiple css files, separate them with white-space
{!highlight|bsmdoc||{%
\config{css|my.css my2.css}
%}!}
or
{!highlight|bsmdoc||{%
\config{css|my.css}
\config{css|add|my2.css}
%}!}
where \tag{code|add} option tells bsmdoc to append the configuration to the current one.

Similarly, bsmdoc also defines the "\tag{code|js}" configuration to include javascripts in the html file
{!highlight|bsmdoc||{%
\config{js|myjs.js myjs2.js}
%}!}

There are two ways to define doc title. The first one is to use the \tag{code|toptitle} configuration. For example, the following line will define the top title
{!div|bs-example||highlight|html||{%
<div class="toptitle">
    bsmdoc -- another technical html doc generator
    <div class="subtitle">
        <a href='mailto:ben.qiao@feiyilin.com'>ben.qiao@feiyilin.com</a>
    </div>
</div>
%}!}
{!div|bs-example-src||highlight|bsmdoc||{%
\config{doctitle|bsmdoc -- another technical html doc generator}
\config{subtitle|[mailto:ben.qiao@feiyilin.com|ben.qiao@feiyilin.com]}
%}!}

It is easy to see that it is equivalent to the following code

{!highlight|bsmdoc||{%
{!div|toptitle||
bsmdoc -- another technical html doc generator
{!div|subtitle||
[mailto:ben.qiao@feiyilin.com|ben.qiao@feiyilin.com]
!}
!}
%}!}
