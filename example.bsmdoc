\config{title|bsmdoc brief introduction}
\config{doctitle|bsmdoc brief introduction}
\config{subtitle|[mailto:ben.qiao@feiyilin.com|ben.qiao@feiyilin.com]}
\config{head_tag|1}
\config{head_tag_start|2}
\config{image_tag|1}
\config{table_tag|1}
\config{source|1}
\config{bsmdoc_conf|bsmdoc.cfg}

{!div|content||
#makecontent
!}
== Why bsmdoc?
bsmdoc is a tool to generate html doc with simple symbols (e.g., {!tag|code||markdown!}).

There are many ways to generate html files. Typing the html tags directly may not be a good use of our time. Besides that straight method, there exists many tools that can help to generate html document from other formats. There may be two philosophies to make such. One is to make a comprehensive and complicated tool, which may satisfy most requirements from most users. On the other side, however, most features may be not be used by most users. And one some missing feature is required, it is almost impossible for user to simply update the tool. The second method is to develop a light-weighted tool, which keeps the implementation as small as possible. In this case, it may only provide some basic features, but allow each user to extend the tool for his own requirement.

We find most existing tools use the first way. Instead, bsmdoc only implements a basic structure and pre-defines a very small set of features to make the it as small as we can, so that hopefully everyone who is familiar with python can update the script to meet his own requirement.

So if you know nothing about python, bsmdoc may not be suitable for you, since most likely the pre-defined features may not be satisfying and new features should be defined by yourself.

bsmdoc depends on the following blocks:

- [http://www.dabeaz.com/ply/|PLY]
- [http://pygments.org/|Pygments] (for syntax highlighting)

#bsmdoc will automatically convert the Unicode characters to html format. For example, {%&#x6211;&#x4eec;%} will be converted to {! tag|code||&amp;\#x6211;&amp;\#x4eec;!}.
#

== Section
Text prefixed with \tag{code}{=} will be converted as sections.

{!div|bs-example||
# stop numbering the headers, so that the following headers will not affect
# the structure of this doc
\config{head_tag|0}
= level 1
== level 2
=== level 3
==== level 4
===== level 5
====== level 6
\config{head_tag|1}
!}{!div|bs-example-src|| pre||{%
= level 1
== level 2
=== level 3
==== level 4
===== level 5
====== level 6
%}!}

Section should start at a new line. In other words, \tag{code|=} will be viewed as normal equal sign if it is not at the start of a line.
We provide all 6 section levels. However, we don't think anyone needs all these 6 sections levels (remember, [http://www.feynmanlectures.caltech.edu/|"The Feynman Lectures on Physics"] only uses 2 levels).

== List
Three kinds of lists are predefined: unordered list, ordered list and definition list.

A line leading with \tag{code|-} will be rendered as unordered list.

{!div|bs-example||
- start each line
- with an hyphen -.
-- more asterisks gives deeper
--- and deeper levels.
- line breaks\n don't break levels.
--- but jumping levels creates empty space.
any other start ends the list.
!}{!div|bs-example-src|| pre||{%
- start each line
- with a hyphen -.
-- more asterisks gives deeper
--- and deeper levels.
- line breaks\n don't break levels.
--- but jumping levels creates empty space.
any other start ends the list.
%}!}

Ordered list starts with \tag{code|*}.

{!div|bs-example||
* start each line
* with a star '*'
 ** more asterisks gives deeper
 *** and deeper levels.
* line breaks\n don't break levels.
*** but jumping levels creates empty space.

any other start ends the list.
!}{!div|bs-example-src|| pre||{%
* start each line
* with a start '*'
** more asterisks gives deeper
*** and deeper levels.
* line breaks\n don't break levels.
*** but jumping levels creates empty space.
any other start ends the list.
%}!}

Unordered and ordered lists can also be arbitrary combined.

{!div|bs-example||
- unordered level 1
-* ordered item1
-* ordered item2
-- unordered item3
-- unordered item4
!}{!div|bs-example-src|| pre||{%
- unordered level 1
-* ordered item1
-* ordered item2
-- unordered item3
-- unordered item4
%}!}

Single list item can expand to multiple line as long as they are embraced with \tag{code|\{}, \tag{code|\}}:

{!div|bs-example||
- {unordered level 1
 More text here
[bsmdoc.feiyilin.com | bsmdoc]
}
-* ordered item2
!}{!div|bs-example-src|| pre||{%
- {unordered level 1
 More text here
[bsmdoc.feiyilin.com | bsmdoc]
}
-* ordered item2
%}!}

== Link
Text between \tag{code|\[} and \tag{code|\]} will be rendered as link.

{!div|bs-example||
[http://bsmedit.sourceforge.net]
!}{!div|bs-example-src||{%
[http://bsmedit.sourceforge.net].
%}!}

Link text can be defined

{!div|bs-example||
[http://bsmedit.sourceforge.net | bsmedit]
!}{!div|bs-example-src ||{%
[http://bsmedit.sourceforge.net | bsmedit].
%}!}

Or email

{!div|bs-example||
[mailto:tianzhu.qiao@feiyilin.com |Email]
!}{!div|bs-example-src||{%
[mailto:tianzhu.qiao@feiyilin.com | Email]
%}!}

== Image
{!exec||{%
import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=[4, 4])
x = np.arange(0,5,0.00001)
y = np.sin(2*np.pi*x)
plt.plot(y)
plt.axis('off')
plt.gca().set_position([0, 0, 1, 1])
plt.savefig("test.svg")
%}!}

Include a image is as easy as

{!div|bs-example|| image||
./test.svg
!}{!div|bs-example-src||pre||{%
{!image||
./test.svg
}
%}!}

Fig.[#img-sin] ({% [#img:sin] %}) shows how to add caption and label to a image. Here the reference is created before the image is added to the doc, which means bsmdoc will not where to link to at this point. In this case, the second scan will automatically be triggered to solve the reference link.

{!div|bs-example||image||
\config{label|img-sin}
\config{caption|$sin$ waveform}
./test.svg
!}{!div|bs-example-src|| pre||{%
{!image||
\config{label|img-sin}
#config{caption|$sin$ waveform}
./test.svg
!}
%}!}

Reference to Fig.[#img-sin] after the image works as usual.

== Equation
bsmdoc uses [www.mathjax.org|mathjax] to render the equations. The configuration may look like:

{!div|bs-example|| highlight|html||{%
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
    tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
    processClass: "mathjax",
    ignoreClass: "tex2jax_ignore|nomathjax"
    });
    MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "all"} } });
</script>
<script type="text/javascript" language="javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script>
%}!}

Inline equation

{!div|bs-example||
Newton's second law is often stated as $F=ma$, which means the force ($F$) acting on an object is equal to the mass ($m$) of an object times its acceleration ($a$).
!} {!div|bs-example-src||pre||{%
Newton's second law is often stated as $F=ma$, which means the force ($F$) acting on an object is equal to the mass ($m$) of an object times its acceleration ($a$).
%}!}

{!div|bs-example|| math||{%
\begin{align}
\begin{bmatrix}
0      & \cdots & 0      \\
\vdots & \ddots & \vdots \\
0      & \cdots & 0
\label{eqn:matrix}
\end{bmatrix}
\end{align}
%}!}

{!div|bs-example-src|| pre||{%
{!math||{%
\begin{align}
\begin{bmatrix}
0      & \cdots & 0      \\
\vdots & \ddots & \vdots \\
0      & \cdots & 0
\label{eqn:matrix}
\end{bmatrix}
\end{align}
%}!}%}!}

Unlike the figure mentioned above, the reference to equation is also handled by [www.mathjax.org|mathjax].

{!div|bs-example||
Eq. (\ref{eqn:matrix})
!}{!div|bs-example-src|| pre||{%
Eq. (\ref{eqn:matrix})
%}!}

== Table \config{label|sec-table}
{!div|bs-example||
{{
\config{label|tbl-example}
\config{caption|Example table title}
Heading | Heading| |+
Item1 | item2 ||-
Item3 | item4 ||-
}}
!}{!div|bs-example-src ||pre ||{%
{{
\config{label|tbl-example}
\config{caption|Example table title}
Heading | Heading| |+
Item1 | item2 ||-
Item3 | item4 ||-
}}
%}!}

Reference to table is as easy as it should

{!div|bs-example||
Table [#tbl-example] shows how to make a table in bsmdoc.
!}{!div|bs-example-src ||{%
Table [#tbl-example] shows how to make a table in bsmdoc.
%}!}

== Code block
For code syntax highlighting, bsmdoc uses [http://pygments.org/docs/quickstart/ | pygments] for parsing. [http://pygments.org/docs/quickstart/ | pygments] needs to be installed before using this feature.
{!tag|code||language!} can be any language supported by Pytments [http://pygments.org/languages/] .

{!div|bs-example|| highlight|python||{%
print "Hello World"
%}!}{!div|bs-example-src||pre||{%
{!highlight|python||{%
print "Hello World"
%}!}
%}!}

{!div|bs-example|| highlight|matlab||{%
fprintf(1, 'Hello, world!\n');
%}!}{!div|bs-example-src||pre||{%
{!highlight|matlab|{%
fprintf(1, 'Hello, world!\n');
%}!}
%}!}

{!div|bs-example|| highlight|C++||{%
#include <iostream>
using namespace std;

int main ()
{
    cout << "Hello World!";
    return 0;
}
%}!}{!div|bs-example-src||pre||{%
{!highlight|matlab||{%
#include <iostream>
using namespace std;

int main ()
{
    cout << "Hello World!";
    return 0;
}
%}!}
%}!}

== Configuration
{{
Option | Description | Default | |+
title | the title of the file | filename ||-
doctitle | the title of the doc |   ||-
subtitle | the subtitle of the doc|  ||-
orderhead| order the heading lines| 0 ||-
orderheadstart | the start level for ordered header | 1 ||-
config | the configure file name | ||-
addcss | add more css file links | ||-
addjs  | add more javascript file links | ||-
}}

== Simple block ({!tag|code||\{ \}!})
As shown above, bsmdoc supports 4 kinds of blocks. The table block have been shown in
The simplest one is the content between '\{' and '\}'. The common place for this block is to setup the configure ({!tag|code||\#cfg!}). bsmdoc supports two types of configuration:
{!div|bs-callout||pre||{%
#cfg:{key} # set the key without value, which means to set the key to value '1'
#cfg:{key}{value} # set the 'key' equal to 'value'
%}!}

== Raw text block ({!tag|code||\{\% \%\}!})
Text between {!tag|code||\{\% \%\}!} will be generally kept untouched, except the {!tag|code||<!} and {!tag|code||>!}, which will be replaced with {!tag|code||&amp;lt;!} and {!tag|code||&amp;gt;!} to avoid the conflict with html tags.

== Function block ({!tag|code||\{\! \!\}!})
The function block is defined as

{!div|bs-example||
\{\!\tag{code|COMMAND}\n
    \tag{code|CONTENT}\n
\!\}
!}

We have seen several blocks so far. For example, image block looks like:

{!pre||
{%{!image||
image-path
!}%}
!}

Equation block:

{!pre||
{%{!math||
latex-equation
!}%}
!}

Syntax highlight block:

{!pre||
{%{!highlight|language||
code
!}%}
!}

The command section is optional. When the command section is not defined, the function block behaves exactly same as the simple block. Otherwise, the corresponding function will be called to process the content included in the block.

Some other predefined commands are:

{!div|bs-example||highlight|html||
{%
<div class="div-class">
content
</div>
%}!}{!div|bs-example-src||pre||
{%{!div|div-class||
content
!}%}
!}

Pre block:

{!div|bs-example||highlight|html||
{%
<pre>
content
</pre>
%}!}{!div|bs-example-src||pre||
{%{!pre||
content
!}%}
!}

Tag block:

{!div|bs-example||highlight|html||
{%
<tag class="tag-class">
content
</tag>
%}!}{!div|bs-example-src||pre||
{%{!tag|key|tag-class||
content
!}%}
!}

As you have already figured out, the command section is defined as

{!div|bs-example||tag|code||
{%command|arg0|arg1|arg2||%}
!}

The command may have arbitrary number of arguments, which are separated by '\|'. And the command is always terminated by '\|\|. It is also possible to combine multiple commands

{!div|bs-example||tag|code||
{%command0|arg0|arg1|arg2||command1|arg0|arg1|arg2||%}
!}

We could define all kinds of function blocks to generate all html tags, and write a comprehensive doc so we can look up later. We don't. Otherwise, that will be not significantly different from remembering all the html syntax. Instead, we make it easy to add new functions.

When bsmdoc sees the following function block

{!div|bs-example||pre||{%
{!command|arg0|arg1||
    content
!}
%}!}

it will call search for the 'bsmdoc_command' function. If found, it will execute the command with list '[arg0, arg1]' as argument. So to define your own function (e.g., 'del'),

{!div|bs-example|| highlight|python||{%
def bsmdoc_del(content, args):
    return "<del>%s</del>"%content
%}!}{!exec||{%
def bsmdoc_del(content, args):
    return "<del>%s</del>"%content
%}!}

{!div|bs-example||del||
    no blue
!}{!div|bs-example-src||{%
{!del||
    no blue
!}
%}!}

One straightforward solution is to define the {!tag|code||bsmdoc_del!} in {!tag|code||bsmdoc.py!} and then all the document can use the {!tag|code||del!} function block. That's means once you find something is missing, you need to go back to the {!tag|code||bsmdoc.py!} and define the function there. It has two potential issues: 1) you need to edit additional file {!tag|code||bsmdoc.py!}. Thus the change is not local to the doc itself. If there is some mistake in the code, suddenly no doc can be compiled; 2) How about two docs need slightly different implementation of some function? You may end up by either using some slightly different (but not straightforward) function names, or adding additional arguments to the function blocks. Neither way is scable. Thus, bsmdoc provides the third choice, such that the function block can be defined in the same doc where it is used. Including the following code in your doc, and it will automatically add the {!tag|code||bsmdoc_del!} function just as it is defined in {!tag|code||bsmdoc.py!}.

{!div|bs-example||pre||
{%
{!exec||{%
def bsmdoc_del(args, content):
    return "<del>%s</del>"%content
%}!}
%}!}

